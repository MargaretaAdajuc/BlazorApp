@page "/wallets"
@using PaySys.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject HttpClient HttpClient
@inject NavigationManager navMananger

<style>
    .wallet{
        width: 250px;
        border: 1px solid #555;
        border-radius: 5px;
        padding: 10px;
    }
</style>

<h3>Wallets</h3>

@if (WalletList == null)
{
    <div>Loading...</div>
}
else
{
    @foreach (var wallet in WalletList)
    {
        <div class="wallet">
            <div>
                <span>@wallet.Amount</span>
                <span>@wallet.Currency</span>
            </div>
            <div>
                <button @onclick="() => DeleteWallet(wallet.Id)">Delete wallet</button>
                <button @onclick="() => MakeTransfer(wallet.Id)">Make Transfer</button>
            </div>
        </div>
    }

    @if(AllowedCurrencies.Any())
    {
        <div>   
            <h3>Create a new wallet</h3>
            <select @bind="Currency">
                @foreach (var currency in AllowedCurrencies)
                {
                    <option value="@currency">@currency</option>
                }
            </select>
            <button @onclick="() => CreateWallet()">Create wallet</button>
        </div>
    }
    else
    {
        <div>You already have a wallet in each currency. You can't create any more wallets.</div>
    }
}

@code {
    private List<Wallet> WalletList;
    private List<string> AllowedCurrencies;
    private CurrencyList CurrencyList;
    private string Currency;

    protected override async Task OnInitializedAsync()
    {
        await LoadWallets();
        await LoadCurrencies();
        GetAllowedCurrencies();
    }

    private async Task LoadCurrencies()
    {
        try
        {
            CurrencyList = await HttpClient.GetFromJsonAsync<CurrencyList>("/currency");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }   
    }

    private async Task LoadWallets()
    {
        try
        {
            WalletList = await HttpClient.GetFromJsonAsync<List<Wallet>>("/wallet");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void GetAllowedCurrencies()
    {
        AllowedCurrencies = new List<string>();

        foreach (var currency in CurrencyList.CurrencyNames)
        {
            if(!WalletList.Any(x => x.Currency == currency))
            {
                AllowedCurrencies.Add(currency);
            }
        }

        AllowedCurrencies.FirstOrDefault();
    }

    private async Task CreateWallet()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(Currency))
                return; 

            var response = await HttpClient.PostAsync($"/wallet?currency=" + Currency, null);

            if (response.IsSuccessStatusCode)
            {
                await LoadWallets();
                GetAllowedCurrencies();
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        } 
    }
    
    private async Task DeleteWallet(Guid id)
    {
        try
        {
            await HttpClient.DeleteAsync("/wallet" + id);
            await LoadWallets();
            GetAllowedCurrencies();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        } 
    }

    private async Task MakeTransfer(Guid id)
    {
        try
        {
            navMananger.NavigateTo($"/transfer/{id}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        } 
    }
}